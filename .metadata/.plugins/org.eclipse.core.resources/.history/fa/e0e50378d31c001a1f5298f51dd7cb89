/*
 * Program.c
 *
 *  Created on: Dec 9, 2019
 *      Author: micheal_onsy
 */
// Iam using TIMER1 , External INT0=> reset,INT1=> Pause & INT2=> resume
// F_CPU=1 MHZ , Prescaler= 1024 , to make increment every one second put 977 in OCR1

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

#define U8_ENABLE_SEG_ONE   0x01
#define U8_ENABLE_SEG_TWO   0x02
#define U8_ENABLE_SEG_THREE 0x04
#define U8_ENABLE_SEG_FOUR  0x08
#define U8_ENABLE_SEG_FIVE  0x10
#define U8_ENABLE_SEG_SIX   0x20
#define FULL_HOUR 12
#define FULL_MINUTE 60
#define FULL_SECOND 60
#define ONE_SECOND 977

unsigned char u8SecondsCount       = 0 ;
unsigned char u8MinutesCount       = 0 ;
unsigned char u8HoursCount         = 0 ;
unsigned char u8ResetButtonStatus  = 0 ;
unsigned char u8PauseButtonStatus  = 0 ;
unsigned char u8ResumeButtonStatus = 0 ;

ISR(INT0_vect)
{
	u8ResetButtonStatus++;
}
ISR(INT1_vect)
{
	u8PauseButtonStatus++;
}
ISR(INT2_vect)
{
	u8ResumeButtonStatus++;
}

ISR(TIMER1_COMPA_vect)
{
	u8SecondsCount++;
	if (u8HoursCount==FULL_HOUR)
	{
		u8HoursCount=0;
	}

	if(u8MinutesCount==FULL_MINUTE)
	{
		u8HoursCount++;
		u8MinutesCount=0;
	}
	if(u8SecondsCount==FULL_SECOND)
	{
		u8MinutesCount++;
		u8SecondsCount=0;
	}
}
void Timer1_CTC_Init(int U8LocNumber )
{
	TCCR1A=(1<<FOC1A)|(11<<FOC1B);
	TCCR1B= (1<<WGM12)|(1<<CS12)|(1<<CS10);
	TCNT1=0;
	OCR1A=U8LocNumber;
	TIMSK=(1<<OCIE1A);
}

void Exteranl_Int0_Init(void)
{
	MCUCR|=(1<<ISC01);
	GICR |= (1<<INT0);
}
void Exteranl_Int1_Init(void)
{
	MCUCR|=(1<<ISC11)|(1<<ISC10);
	GICR |= (1<<INT2);
}
void Exteranl_Int2_Init(void)
{
	MCUCSR &=(~(1<<ISC2));
	GICR |= (1<<INT1);
}
void Project_Init(void)
{
	DDRC  |=(1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3);
	DDRA  |= (1<<PA0)|(1<<PA1)|(1<<PA2)|(1<<PA3)|(1<<PA4)|(1<<PA5);
	PORTC &=(~(1<<PC0))&(~(1<<PC1))&(~(1<<PC2))&(~(1<<PC3));
	DDRB  &= ~(1<<PB2);//INT2
	PORTB |=(1<<PB2);//Internal PULL UP INT2
	DDRD  &= ~(1<<PD2);//INT0
	PORTD |=(1<<PD2);//Internal PULL UP INT
	DDRD  &= ~(1<<PD3);//INT1
}
int main (void)
{
	char U8LocNumber;
	void (*ptr)(int)=Timer1_CTC_Init;
	(*ptr)(977);//1 second =>977
	Project_Init();
	Exteranl_Int0_Init();
	Exteranl_Int1_Init();
	Exteranl_Int2_Init();

	sei();
	while(1)
	{
		U8LocNumber = u8SecondsCount % 10;
		PORTA = U8_ENABLE_SEG_ONE;
		PORTC = U8LocNumber;
		//_delay_ms(5);

		U8LocNumber = u8SecondsCount / 10;
		PORTA = U8_ENABLE_SEG_TWO;
		PORTC = U8LocNumber;
		//_delay_ms(5);

		U8LocNumber = u8MinutesCount % 10;
		PORTA = U8_ENABLE_SEG_THREE;
		PORTC = U8LocNumber;
		//_delay_ms(5);

		U8LocNumber = u8MinutesCount / 10;
		PORTA = U8_ENABLE_SEG_FOUR;
		PORTC = U8LocNumber;
		//_delay_ms(5);

		U8LocNumber = u8HoursCount %10;
		PORTA =U8_ENABLE_SEG_FIVE;
		PORTC = U8LocNumber;
		//_delay_ms(5);

		U8LocNumber = u8HoursCount / 10;
		PORTA = U8_ENABLE_SEG_SIX;
		PORTC = U8LocNumber;
		//_delay_ms(5);

		if (u8ResetButtonStatus==1)
		{
			_delay_ms(20);
			if(!(PIND &(1<<PD2)))
			{
				TCNT1=0;
				u8SecondsCount = 0 ;
				u8MinutesCount = 0 ;
				u8HoursCount= 0 ;
			}
			u8ResetButtonStatus=0;
		}
		if (u8PauseButtonStatus==1)
		{
			_delay_ms(20);
			if(PIND &(1<<PD3))
			{
				TCCR1B &= (~(1<<CS12))&(~(1<<CS11))&(~(1<<CS10));
			}
			u8PauseButtonStatus=0;
		}
		if (u8ResumeButtonStatus==1)
		{
			_delay_ms(20);
			if(!(PINB &(1<<PB2)))
			{
				TCCR1B |=(1<<CS12)|(1<<CS10);
			}
			u8ResumeButtonStatus=0;
		}
	}

}

